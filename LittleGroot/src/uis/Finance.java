/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package uis;

import java.awt.Color;
import main.ModelPieChart;
import java.sql.*;
import java.util.Calendar;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author gamitha
 */
public class Finance extends javax.swing.JPanel {

    // Get current year and month
    Calendar cal = Calendar.getInstance();
    int currentYear = cal.get(Calendar.YEAR);
    int currentMonth = cal.get(Calendar.MONTH) + 1; // Calendar.MONTH is zero-based
        
    /**
     * Creates new form Finance
     */
    public Finance() {
        initComponents();
        
        // Set SVGs
        sVGSummary.setSvgImage("./svgcomponents/FinanceSummary.svg", 609, 89);
        sVGIncomeGraph.setSvgImage("./svgcomponents/FinanceIncomeGraph.svg", 295, 183);
        sVGExpensesGraph.setSvgImage("./svgcomponents/FinanceExpensesGraph.svg", 295, 183);

        // SQL Queries
        String dateCondition = "YEAR(TDate) = " + currentYear + " AND MONTH(TDate) = " + currentMonth;
        String queryExpenses = "SELECT Category, SUM(Price) FROM Finance WHERE TType = 'E' AND " + dateCondition + " GROUP BY Category";
        String queryIncome = "SELECT Category, SUM(Price) FROM Finance WHERE TType = 'I' AND " + dateCondition + " GROUP BY Category";
        String queryTotalIncome = "SELECT SUM(Price) FROM Finance WHERE TType = 'I' AND " + dateCondition;
        String queryTotalExpenses = "SELECT SUM(Price) FROM Finance WHERE TType = 'E' AND " + dateCondition;
        
        // Establish connection, execute SQL queries and populate pie charts
        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/LittleGroot", "root", "toor");
            Statement st = conn.createStatement();

            Random rand = new Random();
                        
            // Populate Expenses Pie Chart
            ResultSet rsExpenses = st.executeQuery(queryExpenses);
            while (rsExpenses.next()) {
                String category = rsExpenses.getString(1);
                double price = rsExpenses.getDouble(2);
                Color color = new Color(0, rand.nextFloat(), 0);
                pieChartExpenses.addData(new ModelPieChart(category, price, color));
            }
            // Set summary set
            ResultSet rsTotalIncome = st.executeQuery(queryTotalIncome);
            if (rsTotalIncome.next()) {
                double totalIncome = rsTotalIncome.getDouble(1);
                lblTotalIncome.setText(String.format("$%.2f", totalIncome));
            }

            // Populate Income Pie Chart
            ResultSet rsIncome = st.executeQuery(queryIncome);
            while (rsIncome.next()) {
                String category = rsIncome.getString(1);
                double price = rsIncome.getDouble(2);
                Color color = new Color(0, rand.nextFloat(), 0);
                pieChartIncome.addData(new ModelPieChart(category, price, color));
            }
            // Set summary set
            ResultSet rsTotalExpenses = st.executeQuery(queryTotalExpenses);
            if (rsTotalExpenses.next()) {
                double totalExpenses = rsTotalExpenses.getDouble(1);
                lblTotalExpenses.setText(String.format("$%.2f", totalExpenses));
            }
            

        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, "Database Connection Error" + e.getMessage());
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Failed to close connection");
                }
            }
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbIncome = new javax.swing.JComboBox<>();
        cmbExpenses = new javax.swing.JComboBox<>();
        pieChartIncome = new main.PieChart();
        pieChartExpenses = new main.PieChart();
        lblTotalIncome = new javax.swing.JLabel();
        lblTotalExpenses = new javax.swing.JLabel();
        sVGSummary = new main.SVGImage();
        sVGIncomeGraph = new main.SVGImage();
        sVGExpensesGraph = new main.SVGImage();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(null);
        setSize(new java.awt.Dimension(649, 478));
        setLayout(null);

        cmbIncome.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "Year" }));
        cmbIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbIncomeActionPerformed(evt);
            }
        });
        add(cmbIncome);
        cmbIncome.setBounds(238, 136, 70, 21);

        cmbExpenses.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "Year" }));
        cmbExpenses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbExpensesActionPerformed(evt);
            }
        });
        add(cmbExpenses);
        cmbExpenses.setBounds(552, 136, 70, 21);
        add(pieChartIncome);
        pieChartIncome.setBounds(20, 129, 295, 183);
        add(pieChartExpenses);
        pieChartExpenses.setBounds(341, 129, 281, 183);

        lblTotalIncome.setFont(new java.awt.Font("SF Pro Text", 0, 26)); // NOI18N
        lblTotalIncome.setForeground(new java.awt.Color(0, 0, 0));
        lblTotalIncome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotalIncome.setText("lblTotalIncome");
        lblTotalIncome.setToolTipText("");
        add(lblTotalIncome);
        lblTotalIncome.setBounds(38, 59, 268, 32);

        lblTotalExpenses.setFont(new java.awt.Font("SF Pro Text", 0, 26)); // NOI18N
        lblTotalExpenses.setForeground(new java.awt.Color(0, 0, 0));
        lblTotalExpenses.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotalExpenses.setText("lblTotalExpenses");
        lblTotalExpenses.setToolTipText("");
        add(lblTotalExpenses);
        lblTotalExpenses.setBounds(344, 59, 268, 32);

        sVGSummary.setForeground(new java.awt.Color(0, 0, 0));
        sVGSummary.setText("sVGSummary");
        add(sVGSummary);
        sVGSummary.setBounds(20, 20, 609, 89);

        sVGIncomeGraph.setForeground(new java.awt.Color(0, 0, 0));
        sVGIncomeGraph.setText("sVGIncomeGraph");
        add(sVGIncomeGraph);
        sVGIncomeGraph.setBounds(20, 129, 295, 183);

        sVGExpensesGraph.setForeground(new java.awt.Color(0, 0, 0));
        sVGExpensesGraph.setText("sVGExpensesGraph");
        add(sVGExpensesGraph);
        sVGExpensesGraph.setBounds(334, 129, 295, 183);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbIncomeActionPerformed
        // Clear existing data
        pieChartIncome.clearData();

        // Get selected value
        String selectedValue = cmbIncome.getSelectedItem().toString();

        // Modify SQL queries based on selected value
        String dateCondition = selectedValue.equals("Year") ? "YEAR(TDate) = " + currentYear : "YEAR(TDate) = " + currentYear + " AND MONTH(TDate) = " + currentMonth;
        String queryIncome = "SELECT Category, SUM(Price) FROM Finance WHERE TType = 'I' AND " + dateCondition + " GROUP BY Category";
        String queryTotalIncome = "SELECT SUM(Price) FROM Finance WHERE TType = 'I' AND " + dateCondition;

        // Establish connection, fetch data and update charts
        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/LittleGroot", "root", "toor");
            Statement st = conn.createStatement();

            Random rand = new Random();

            ResultSet rsIncome = st.executeQuery(queryIncome);
            while (rsIncome.next()) {
                String category = rsIncome.getString(1);
                double price = rsIncome.getDouble(2);
                Color color = new Color(0, rand.nextFloat(), 0);
                pieChartIncome.addData(new ModelPieChart(category, price, color));
            }
            
            // Set summary set
            ResultSet rsTotalIncome = st.executeQuery(queryTotalIncome);
            if (rsTotalIncome.next()) {
                double totalIncome = rsTotalIncome.getDouble(1);
                lblTotalIncome.setText(String.format("$%.2f", totalIncome));
            }
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, "Database Connection Error" + e.getMessage());
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Failed to close connection");
                }
            }
        }
    }//GEN-LAST:event_cmbIncomeActionPerformed

    private void cmbExpensesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbExpensesActionPerformed
        // Clear existing data
        pieChartExpenses.clearData();

        // Get selected value
        String selectedValue = cmbExpenses.getSelectedItem().toString();

        // Modify SQL queries based on selected value
        String dateCondition = selectedValue.equals("Year") ? "YEAR(TDate) = " + currentYear : "YEAR(TDate) = " + currentYear + " AND MONTH(TDate) = " + currentMonth;
        String queryExpenses = "SELECT Category, SUM(Price) FROM Finance WHERE TType = 'E' AND " + dateCondition + " GROUP BY Category";
        String queryTotalExpenses = "SELECT SUM(Price) FROM Finance WHERE TType = 'E' AND " + dateCondition;
        
        // Establish connection, fetch data and update charts
        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/LittleGroot", "root", "toor");
            Statement st = conn.createStatement();

            Random rand = new Random();
            
            ResultSet rsExpenses = st.executeQuery(queryExpenses);
            while (rsExpenses.next()) {
                String category = rsExpenses.getString(1);
                double price = rsExpenses.getDouble(2);
                Color color = new Color(0, rand.nextFloat(), 0);
                pieChartExpenses.addData(new ModelPieChart(category, price, color));
            }
            
            // Set summary set
            ResultSet rsTotalExpenses = st.executeQuery(queryTotalExpenses);
            if (rsTotalExpenses.next()) {
                double totalExpenses = rsTotalExpenses.getDouble(1);
                lblTotalExpenses.setText(String.format("$%.2f", totalExpenses));
            }
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, "Database Connection Error" + e.getMessage());
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Failed to close connection");
                }
            }
        }
    }//GEN-LAST:event_cmbExpensesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbExpenses;
    private javax.swing.JComboBox<String> cmbIncome;
    private javax.swing.JLabel lblTotalExpenses;
    private javax.swing.JLabel lblTotalIncome;
    private main.PieChart pieChartExpenses;
    private main.PieChart pieChartIncome;
    private main.SVGImage sVGExpensesGraph;
    private main.SVGImage sVGIncomeGraph;
    private main.SVGImage sVGSummary;
    // End of variables declaration//GEN-END:variables
}
